from calibre.web.feeds.news import BasicNewsRecipe
from calibre.ebooks.BeautifulSoup import NavigableString

class reduxOfficial(BasicNewsRecipe):
    title = 'redux_official_document'
    __author__ = ''
    description = (''
                   '')
    timefmt = '[%Y-%m-%d]'
    no_stylesheets = True
    url_prefix = 'http://redux.js.org/'
    keep_only_tags = [{'id': 'section-'},
                      ]
    def get_title(self, aTag):
        index = ''
        content = ''
        
        for item in aTag.contents[1:len(aTag.contents)]:
            # print type(item)
            # print type(item) == NavigableString
            if type(item) == NavigableString:
                content += item.string
                continue
                
            if item.name == 'b':
                index =  aTag.b.string 
                continue

        # print content
        return index + ' ' + content

    def generate_article(self, liTag):
        aTag = liTag.a
        title = self.get_title(aTag)
        url = self.url_prefix + liTag['data-path']
        article = {'title': title, 'url': url}
        return article


    def parse_index(self):
        soup = self.index_to_soup(self.url_prefix + 'docs/introduction/index.html')
        articles = []
        fli = soup.find('ul', 'summary').li
        rli = fli
        while type(fli) == type(rli) and  'chapter' in fli['class']: 
                if fli.a is None:
                    fli  = fli.nextSibling.nextSibling
                    continue

                article = self.generate_article(fli)
                articles.append(article)
                if fli.ul is not None and ( 'articles' in fli.ul['class']):
                    sli = fli.ul.li
                    while type(sli) == type(rli) and ('chapter' in sli['class']):
                        if sli.a is None:
                            sli  = sli.nextSibling.nextSibling
                            continue
                        article = self.generate_article(sli)
                        articles.append(article)
                        sli = sli.nextSibling.nextSibling 

                fli  = fli.nextSibling.nextSibling

        # print 'articles', articles
        ans = [('redux official', articles)]
        return ans
